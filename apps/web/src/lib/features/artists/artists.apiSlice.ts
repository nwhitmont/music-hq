import {
  FetchArgs,
  createApi,
  fetchBaseQuery,
} from '@reduxjs/toolkit/query/react'

// interface Artist {
//   id: number
//   createdAt: string
//   updatedAt: string
//   deletedAt: string | null
//   name: string
// }

// interface ArtistsApiResponse {
//   tracks: Artist[]
//   total: number
//   skip: number
//   limit: number
// }

export const artistsApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: 'http://localhost:3001/api',
  }),
  reducerPath: 'artistsApi',
  // Tag types are used for caching and invalidation.
  tagTypes: ['Artists'],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getTracks: build.query({
      query: () =>
        ({
          url: '/artists',
          method: 'GET',
        } as FetchArgs),
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: 'Artists', id }],
    }),
    // createTrack: build.mutation({
    //   query: ({ ...createTrackDto }) => ({
    //     url: `tracks`,
    //     method: 'POST',
    //     body: createTrackDto,
    //   }),
    // }),
    // updateTrack: build.mutation({
    //   query: ({ id, ...updateTrackDto }) => ({
    //     url: `tracks/${id}`,
    //     method: 'PATCH',
    //     body: updateTrackDto, //create dto
    //   }),
    //   // Pick out data and prevent nested properties in a hook or selector
    //   // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //   //@ts-ignore
    //   transformResponse: (response) => response.data,
    //   // Pick out error and prevent nested properties in a hook or selector
    //   // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //   //@ts-ignore
    //   transformErrorResponse: (response) => response.error,
    //   // `result` is the server response
    //   // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //   //@ts-ignore
    //   invalidatesTags: (result, error, id) => [{ type: 'Post', id }],
    //   // trigger side effects or optimistic updates
    //   onQueryStarted(
    //     id,
    //     { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry } // eslint-disable-next-line @typescript-eslint/no-empty-function
    //   ) {},
    //   // handle subscriptions etc
    //   onCacheEntryAdded(
    //     id,
    //     {
    //       dispatch,
    //       getState,
    //       extra,
    //       requestId,
    //       cacheEntryRemoved,
    //       cacheDataLoaded,
    //       getCacheEntry,
    //     } // eslint-disable-next-line @typescript-eslint/no-empty-function
    //   ) {},
    // }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `tracksApiSlice.endpoints.getTracks.useQuery`
export const {
  useGetTracksQuery,
  // useCreateTrackMutation,
  // useUpdateTrackMutation,
} = artistsApiSlice
